#include<iostream>
#include<malloc.h>
#include<stdlib.h>
using namespace std;

struct listNode
{
	int val;
	struct listNode * next;	
};
typedef struct listNode* linkList;
void InitList (linkList &L)
{
	L=(linkList)malloc(sizeof(linkList));
	if(!L)
		exit(1);
	else
		L->next = NULL;
}
void DestroyList(linkList &L)
{
	linkList t,x;
	t=L->next;
	x=t->next;
	while(x)
	{
		free(t);
		t=x;
		x=x->next;
	}
	free(x);
	x=NULL;
}
bool ListEmpty(linkList &L)
{
	if(!(L->next)) 
	{return true;}
	else 
	{return false;}
}
int ListLength(linkList &L)
{
	int i=0;
	struct listNode* t;
	t=L;
	while(t)
	{
		t=t->next;
		i++;
	}
	return i-1;
}
int GetElem (linkList L,int index)//所有index从1开始
{
	if(index>ListLength(L))
	{
		cout << "index taichangle" << endl;
		 
	}
	int i;
	int a=0;
	for(i=0;i<index;i++)
	{
		L=L->next;
		a=L->val;
	}
	return a;
}
int GetIndex (linkList &L,listNode* p)	// 返回链表节点p的下标 
{	
	listNode* q;//结果不一定对 
	q=L;
	int i=0;
	while(q!=p)
	{
		q=q->next;
		i++;
	}
	return i;
}
struct listNode* GetListNode(linkList &L,int index) //返回链表第i个数字的节点 
{
	if(index == 0)
		return L;
	struct listNode* p;
	p=L;
	for(int i=0; i < index; i++){
		p=p->next;	
	}	
	return p;
}
void InsertList(linkList &L,int index,int val)//在第index处插入新的节点 
{
	int i;
	listNode* q;
	q=L;
	if(index==ListLength(L))
	{
		while(q->next)
		{
			q=q->next;
		}
		q->next=(struct listNode*)malloc(sizeof(struct listNode));
		q=q->next;
		q->val=val;
		q->next=NULL;	
		return;
	}
	
	for(i=0;i<index-1;i++)
	{
		q=q->next;
	}
	listNode* newNode;
	newNode=(struct listNode*)malloc(sizeof(struct listNode));
	newNode->next=q->next;
	q->next=newNode;
	newNode->val=val;
}
void Converse(linkList &head) //反转链表 
{ 
	linkList p,q;
	p=head->next;
	head->next=NULL;
	while(p)
	{
		q=p;
		p=p->next;

		q->next=head->next;
		head->next=q;
	}
}
void DeleteNode(linkList &L,int index)//删除第index个数,index从1开始 
{
	listNode *p,* q;
	p=L;
	q=p->next;
	if(index==1)
	{
		L->next=q->next;
		free(q);
		return;
	}
	int len = ListLength(L)-1;
	if(index==len)
	{
		while(p->next->next)
		{
			p=p->next;
		}
		q=p->next;
		p->next=NULL;
		free(q);
		return;
	}
	for(int i=1;i<index;i++)
	{
		p=p->next;
	}
	q=p->next;
	p->next=q->next;
	free(q);
	
} 
void PrintList (linkList L)
{
	int len = ListLength(L);
	for(int i=0;i<len;i++)
	{
		cout << GetElem(L,i+1) << " ";
	}
}

void swap(int &a, int &b)
{
	int t=a;
	a=b;
	b=t;
}

void ListSort(linkList &L)		// 冒泡排序链表 
{
	int len = ListLength(L);
	for(int i = 1; i <= len; i++){
		for(int j = len; j > i; j--){
			if (GetElem(L,i) > GetElem(L,j)){
				swap(GetListNode(L,i)->val,GetListNode(L,j)->val);
			}
		}
	}
}

linkList mergeTwoLists(linkList &l1, linkList &l2)
{//空链表 
	l1=l1->next;
	l2=l2->next;
	if(!l1&&!l2)
        return NULL;
    if(!l1)
        return l2;
    if(!l2)
        return l1;
    struct listNode * listhead=NULL;
    struct listNode * t,*p;
    t=(struct listNode *)malloc(sizeof(struct listNode));
    listhead=t;
    p=listhead;
    int resultLen = 0;
    while(l1&&l2)
    {
        if(l1->val<l2->val)
        {
            t->val=l1->val;
            l1=l1->next;
        }
        else
        {
            t->val=l2->val;
            l2=l2->next;
        }
        t->next=(struct listNode *)malloc(sizeof(struct listNode));
        resultLen++;
        t=t->next;
    }
    while(l1)
    { 
        t->val=l1->val;
        l1=l1->next;
        t->next=(struct listNode *)malloc(sizeof(struct listNode));
        resultLen++;
        t=t->next;
    }
    while(l2)
    {
        t->val=l2->val;
        l2=l2->next;
        t->next=(struct listNode *)malloc(sizeof(struct listNode));
        resultLen++;
        t=t->next;

    }

    int a[20],i=0;
    while(1)
    {
        resultLen--;
        if(resultLen==0){
            p->next=NULL;
            break;
        }
        p=p->next;
    }
    return listhead;
}

int main()
{
	linkList A,B;
	InitList(A);
	InitList(B);
	int l1=0,l2=0;
	cout<<"请输入链表1的长度："<<endl;
	cin>>l1;
	cout<< "请输入链表1："<<endl;
	 
	for(int i=0;i<l1;i++)
	{	
		int a=0; 
		cin>>a;
		InsertList(A,i,a);
	}
	cout<<"请输入链表2的长度："<<endl;
	cin>>l2;
	cout<< "请输入链表2："<<endl;
	for(int i=0;i<l2;i++)
	{	
		int a=0; 
		cin>>a;
		InsertList(B,i,a);
	}
	//第一问 
	Converse(A);
	Converse(B);
	cout<<"A: ";
	PrintList(A);
	cout<<endl<<"B: ";
	PrintList(B);
	cout<<endl;
	//第二问 
	ListSort(A);
	ListSort(B);//分别对A，B排序
	linkList result=mergeTwoLists(A,B);	//合并有序链表
	struct listNode *newhead = (struct listNode *)malloc(sizeof(struct listNode));
	newhead->next=result;
	result=newhead;
	PrintList(result); 
	cout<<endl;
	//第三问
	int ma=l1+l2;
	int a[ma],j=0;
	listNode* th;
	th=result->next;
	while(th)
	{
		a[j]=th->val;
		j++;
		th=th->next;
	}
	int b[ma],count=1;
	b[0]=a[0];
	for(int i=1;i<ma;i++)
	{
		int boo=1;
		for(int t=0;t<count;t++)
		{
			if((b[t]==a[i])||(b[t]==(a[i]*(-1))))
			{
				boo=0;
				break;
			}
		}
		if(boo!=0) 
		{
			b[count]=a[i];
			count++;
		}
	}
	for(int i=0;i<count;i++)
	{
		cout<<b[i]<<" ";
	}
	cout<<endl;
	
	system("Pause");
	return 1;
}
